
ethtool -i eth0		#driver of the NIC
ip maddr			#ip addr's & m-cast groups on interfaces; shows bond composition
tcpdump -i eth1 -s 65534 host 238.225.35.84		#on interface on MCgroup, full size = 65534
ethtool -S eth1 | grep mcast_pack	#see arriving MC packet counts

netstat -sgu ; sleep 10 ; netstat -sgu	#sleep! between calls

/etc/sysctl.conf	#kernel config..., also in /boot/config-....
net.ipv4.all.rp_filter = 1
net.ipv4.eth1.rp_filter = 0

last reboot		#reboot instances

strace echo "OK"	#list of system calls made by the program `echo`

# Ring buffers on the NIC are important to handle bursts of incoming packets especially if there is some delay when the hardware interrupt # handler schedules the packet receiving software interrupt (softirq). 
ethtool -g eth1
ethtool -G eth1 rx 4096 tx 4096

#Now about every week I am getting corrupted arp tables. Deleting the table with arp -d 
(win: NETSH INTERFACE IPv4 DELETE NEIGHBORS; or arp -d *)
ip -s -s neigh flush all

## --> check/verify on rhel boxes; especially buffers

# Data transmission
# NIC -(dma)->RingBuffer(RX)->ParseIP->ParseTCP/UDP->SocketBuffer(R)-(read)->Application
# NIC -(dma)->RingBuffer(TX)->ConstructIP->ConstructTCP/UDP->SocketBuffer(W)<-(write)-Application

/proc/sys/net/ipv4/tcp_rmem (for read)
/proc/sys/net/ipv4/tcp_wmem (for write)
262144  1048576 16777216
(min, default, max in Bytes)


 /proc/interrupts			#hard interrupts (NIC calls kernel; intrusive)
 grep RX /proc/softirqs		#soft irq's (kernel calls NIC; fast); they attach to device driver's callbacks
 
 ps ax --> (these do softirq's), 
      4 ?        S      0:47 [ksoftirqd/0]
      9 ?        S      0:51 [ksoftirqd/1]

Under normal operation, an initial hard interrupt or IRQ is raised, followed by a SoftIRQ handler
which polls the card using NAPI routines.

Once traffic has been received from the NIC into the kernel, it is then processed by protocol
handlers such as Ethernet, ICMP, IPv4, IPv6, TCP, UDP, and SCTP.
Finally, the data is delivered to a socket buffer where an application can run a receive function,
moving the data from kernel space to userspace and ending the kernel's involvement in the
receive process.

https://access.redhat.com/sites/default/files/attachments/20150325_network_performance_tuning.pdf


--> LinuxCon 2015 Linux Kernel Networking Walkthrough - SlideShare

netstat -s     #most config values for network kernel module
 watch 'netstat -s | grep -E reassembles'

## Modify sizes of socket buffers 
sysctl -w net.core.wmem_default=65536
sysctl -w net.core.wmem_max=1677216
sysctl -w net.core.rmem_default=8388608
sysctl -w net.core.rmem_max=1677216 
 
